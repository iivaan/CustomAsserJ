package com.paxovision.model;

import java.util.Objects;

import com.paxovision.assertions.SkynetIntegerAssert;
import com.paxovision.assertions.SkynetStringAssert;
import com.paxovision.assertions.SkynetintAssert;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link MyModel} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class MyModelAssert extends AbstractObjectAssert<MyModelAssert, MyModel> {

  /**
   * Skynet
   * Creates a new <code>{@link MyModelAssert}</code> to make assertions on actual MyModel.
   * @param actual the MyModel we want to make assertions on.
   */
  public MyModelAssert(MyModel actual) {
    super(actual, MyModelAssert.class);
  }

  /**
   * Skynet
   * An entry point for MyModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMyModel)</code> and get specific assertion with code completion.
   * @param actual the MyModel we want to make assertions on.
   * @return a new <code>{@link MyModelAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static MyModelAssert assertThat(MyModel actual) {
    return new MyModelAssert(actual);
  }

  public MyModelAssert and(){
    return this;
  }
  /**
   * Skynet
   * Verifies that the actual MyModel is active.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyModel is not active.
   */
  public MyModelAssert isActive() {
    // check that actual MyModel we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isActive()) {
      failWithMessage("\nExpecting that actual MyModel is active but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Skynet
   * Verifies that the actual MyModel is not active.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyModel is active.
   */
  public MyModelAssert isNotActive() {
    // check that actual MyModel we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isActive()) {
      failWithMessage("\nExpecting that actual MyModel is not active but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Skynet Object
   * Verifies that the actual MyModel's address is equal to the given one.
   * @param address the given address to compare the actual MyModel's address to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyModel's address is not equal to the given one.
   */
  public MyModelAssert hasAddress(String address) {
    // check that actual MyModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting address of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAddress = actual.getAddress();
    if (!Objects.deepEquals(actualAddress, address)) {
      failWithMessage(assertjErrorMessage, actual, address, actualAddress);
    }

    // return the current assertion for method chaining
    return this;
  }

  public SkynetStringAssert<MyModelAssert> address() {
      return new SkynetStringAssert<MyModelAssert>(this,actual.getAddress());
  }

  /**
  * Skynet int
   * Verifies that the actual MyModel's id is equal to the given one.
   * @param id the given id to compare the actual MyModel's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyModel's id is not equal to the given one.
   */
  public MyModelAssert hasId(int id) {
    // check that actual MyModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

   /**
   * Skynet custom assertion for whole number
   */
   public SkynetintAssert<MyModelAssert> id() {
        return new SkynetintAssert<MyModelAssert>(this,actual.getId());
   }

  /**
   * Skynet Object
   * Verifies that the actual MyModel's name is equal to the given one.
   * @param name the given name to compare the actual MyModel's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyModel's name is not equal to the given one.
   */
  public MyModelAssert hasName(String name) {
    // check that actual MyModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.deepEquals(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  public SkynetStringAssert<MyModelAssert> name() {
      return new SkynetStringAssert<MyModelAssert>(this,actual.getName());
  }

  /**
   * Verifies that the actual MyModel's zip is equal to the given one.
   * @param zip the given zip to compare the actual MyModel's zip to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyModel's zip is not equal to the given one.
   */
  public MyModelAssert hasZip(Integer zip) {
    // check that actual MyModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting zip of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualZip = actual.getZip();
    if (!Objects.deepEquals(actualZip, zip)) {
      failWithMessage(assertjErrorMessage, actual, zip, actualZip);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
  * Skynet custom assertion for whole number
  */
  public SkynetIntegerAssert<MyModelAssert> zip() {
      return new SkynetIntegerAssert<MyModelAssert>(this,actual.getZip());
  }

}
